# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require 'coveralls'
require 'pathname'
require 'simplecov'

SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
  SimpleCov::Formatter::HTMLFormatter,
  Coveralls::SimpleCov::Formatter,
]
SimpleCov.start do
  add_filter Bundler.bundle_path.to_s
  add_filter File.dirname(__FILE__)
end

module TestDataHelpers
  ROOT = Pathname.new(__FILE__).parent.join('data')
  INPUT_ROOT = ROOT.join('input')
  DEST_ROOT = ROOT.join('dest')

  def test_input(path)
    INPUT_ROOT.join(path)
  end

  def test_dest(path)
    DEST_ROOT.join(path)
  end

  def self.prepare_dest
    DEST_ROOT.mkpath
  end

  def self.clean_dest
    DEST_ROOT.rmtree
  end
end

module OutputHelpers
  def capture_stdout(&block)
    orig = $stdout
    stdout = StringIO.new
    $stdout = stdout
    block.call
    stdout.string
  ensure
    $stdout = orig
  end

  def capture_stderr(&block)
    orig = $stdout
    stderr = StringIO.new
    $stderr = stderr
    block.call
    stderr.string
  ensure
    $stderr = orig
  end
end

require 'open3'
module TarHelpers
  def tar(*args)
    cmd = ['tar'] + args
    out, status = Open3.capture2(*cmd)
    if status.success?
      out.each_line.map(&:chomp)
    else
      raise "capture2 failed: #{status}: #{cmd.join(' ')}"
    end
  end
end

RSpec.configure do |config|
  # Limit the spec run to only specs with the focus metadata. If no specs have
  # the filtering metadata and `run_all_when_everything_filtered = true` then
  # all specs will run.
  #config.filter_run :focus

  # Run all specs when none match the provided filter. This works well in
  # conjunction with `config.filter_run :focus`, as it will run the entire
  # suite when no specs have `:filter` metadata.
  #config.run_all_when_everything_filtered = true

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  #config.order = 'random'

  config.include TestDataHelpers
  config.before(:each) do
    TestDataHelpers.prepare_dest
  end
  config.after(:each) do
    TestDataHelpers.clean_dest
  end

  config.include OutputHelpers
  config.include TarHelpers
end
